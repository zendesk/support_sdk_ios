{"relationshipsSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState"]},{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)"],"title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations"],"generated":true}],"metadata":{"modules":[{"name":"SupportSDK"}],"roleHeading":"Class","symbolKind":"class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombinedReducer"}],"externalID":"s:10SupportSDK15CombinedReducerC","navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}],"role":"symbol","title":"CombinedReducer"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"text":"final","kind":"keyword"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombinedReducer"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"code":["let combinedReducers = Reducer1() + Reducer2() + Reducer3()"],"type":"codeListing","syntax":null},{"text":"Example","level":1,"type":"heading","anchor":"Example"},{"anchor":"Combine-reducers","type":"heading","level":2,"text":"Combine reducers"},{"inlineContent":[{"text":"If your application has two screens, you can model that with two states, for example ","type":"text"},{"type":"codeVoice","code":"TodoList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Settings"},{"type":"text","text":" states."},{"type":"text","text":" "},{"text":"We can then create two reducers for each of these states.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let todoReducer = BlockReducer(state: TodoList.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let settingsReducer = BlockReducer(state: Settings.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"],"syntax":null},{"inlineContent":[{"text":"We can then combine these 2 reducers with:","type":"text"}],"type":"paragraph"},{"code":["let store = Suas.createStore(","  reducer: todoReducer + settingsReducer",")"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"todoReducer"},{"type":"text","text":" will handle the “TodoList” key of state and "},{"code":"settingsReducer","type":"codeVoice"},{"type":"text","text":" will handle the “Settings” portoon of the full Store state"}],"type":"paragraph"},{"type":"heading","text":"Combine reducers with custom state key","level":2,"anchor":"Combine-reducers-with-custom-state-key"},{"type":"paragraph","inlineContent":[{"text":"If a store has a state with two keys “key1” and “key2”. We can register a reducer for each one of these keys.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We create two reducers with ","type":"text"},{"type":"codeVoice","code":"stateKey"},{"type":"text","text":"s of “key1” and “key2”"}]},{"syntax":null,"type":"codeListing","code":["let myReducer1 = BlockReducer(state: 1, key: \"key1\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let myReducer2 = BlockReducer(state: 1, key: \"key2\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"text":"We can then combine these 2 reducers with:","type":"text"}]},{"syntax":null,"code":["let store = Suas.createStore(","  reducer: myReducer1 + myReducer2",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"myReducer1"},{"text":" will handle the “key1” key of state and ","type":"text"},{"type":"codeVoice","code":"myReducer2"},{"type":"text","text":" will handle the “key2” key of state"}]}]}],"variants":[{"paths":["\/documentation\/supportsdk\/combinedreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer"},"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"text":" ","type":"text"},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator."}],"sections":[],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/reduce(state:action:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"text":"(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Any","kind":"keyword"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"text":"Action","preciseIdentifier":"s:10SupportSDK6ActionP","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Any","kind":"keyword"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Generates a new state from the old state and an action"}],"kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)","url":"\/documentation\/supportsdk\/combinedreducer\/reduce(state:action:)","type":"topic","title":"reduce(state:action:)","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"CombinedReducer","kind":"identifier"}],"navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}],"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" operator.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","url":"\/documentation\/supportsdk\/combinedreducer","title":"CombinedReducer","type":"topic","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","role":"collection","url":"\/documentation\/supportsdk","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","abstract":[],"kind":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Reducer":{"url":"\/documentation\/supportsdk\/reducer","title":"Reducer","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"kind":"symbol","abstract":[{"type":"text","text":"Protocol that represents a reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/Reducer-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations","url":"\/documentation\/supportsdk\/combinedreducer\/reducer-implementations","title":"Reducer Implementations","type":"topic","role":"collectionGroup"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/initialState":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"initialState","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"keyword","text":"Any"}],"abstract":[{"text":"Inital state value for this particular reducer","type":"text"},{"text":" ","type":"text"},{"text":"This initial state will be used to populate the Store state (which represents the app state)","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState","url":"\/documentation\/supportsdk\/combinedreducer\/initialstate","title":"initialState","type":"topic","role":"symbol"}}}