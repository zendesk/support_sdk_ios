{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"EqualsFilter","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10SupportSDK14FilterFunctiona","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","kind":"typeIdentifier","text":"FilterFunction"},{"kind":"text","text":"<"},{"text":"Any","kind":"keyword"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["iOS"]}]},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In order to use this filter block your state types has to implement ","type":"text"},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"text":"Note: if you implement ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" you can implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" without any extra code."},{"text":" ","type":"text"},{"type":"text","text":"You only have to include "},{"code":"SuasDynamicEquatable","type":"codeVoice"},{"type":"text","text":" in the list of protocols for your type (check examples)."}]},{"level":1,"type":"heading","anchor":"Example","text":"Example"},{"text":"Implementing SuasDynamicEquatable manually","level":2,"type":"heading","anchor":"Implementing-SuasDynamicEquatable-manually"},{"inlineContent":[{"type":"text","text":"Implementing SuasDynamicEquatable without Equatable"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Implement SuasDynamicEquatable manually","struct MyState: SuasDynamicEquatable {","  let value: Int","","  func isEqual(to other: Any) -> Bool {","    \/\/ Cast to same type","    guard let other = other as? MyState else { return false }","","    \/\/ Compare values","    return other.value == self.value","  }","}","","let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"],"syntax":null},{"anchor":"Implementing-SuasDynamicEquatable-as-an-extension","type":"heading","level":2,"text":"Implementing SuasDynamicEquatable as an extension"},{"type":"paragraph","inlineContent":[{"text":"If your type implement equatable","type":"text"}]},{"type":"codeListing","code":["struct MyState: Equatable {","  let value: Int","  static func ==(lhs: MyState, rhs: MyState) -> Bool { ... }","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You dont need to implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" just add it as an extension to "},{"type":"codeVoice","code":"MyState"},{"type":"text","text":". No extra code needed."}]},{"syntax":null,"type":"codeListing","code":["extension MyState: SuasDynamicEquatable { }"]},{"type":"paragraph","inlineContent":[{"code":"EqualsFilter","type":"codeVoice"},{"text":" now works with ","type":"text"},{"type":"codeVoice","code":"MyState"}]},{"syntax":null,"code":["let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"],"type":"codeListing"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/supportsdk\/equalsfilter"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"SupportSDK"}],"roleHeading":"Global Variable","externalID":"s:10SupportSDK12EqualsFilterySbyp_yptcvp","symbolKind":"var","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"EqualsFilter","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"keyword","text":"Any"},{"text":">","kind":"text"}],"title":"EqualsFilter","role":"symbol"},"abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"text":" ","type":"text"},{"text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"abstract":[{"text":"Filter function that decides if the listener should be notified or not","type":"text"}],"type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FilterFunction","kind":"identifier"}],"url":"\/documentation\/supportsdk\/filterfunction","title":"FilterFunction"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","role":"collection","url":"\/documentation\/supportsdk","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","abstract":[],"kind":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/EqualsFilter":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EqualsFilter","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"text":"<","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":">"}],"url":"\/documentation\/supportsdk\/equalsfilter","role":"symbol","title":"EqualsFilter","kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","abstract":[{"text":"Listener filter callback that returns true if the old state and the new state are not equal.","type":"text"},{"type":"text","text":" "},{"text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes.","type":"text"}],"type":"topic"}}}