{"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations"],"generated":true}],"relationshipsSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"metadata":{"roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"CombinedReducer","kind":"identifier"}],"symbolKind":"class","title":"CombinedReducer","navigatorTitle":[{"kind":"identifier","text":"CombinedReducer"}],"externalID":"s:10SupportSDK15CombinedReducerC","modules":[{"name":"SupportSDK"}],"role":"symbol"},"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/supportsdk\/combinedreducer"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombinedReducer"}]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"codeListing","code":["let combinedReducers = Reducer1() + Reducer2() + Reducer3()"],"syntax":null},{"text":"Example","level":1,"type":"heading","anchor":"Example"},{"anchor":"Combine-reducers","text":"Combine reducers","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"If your application has two screens, you can model that with two states, for example "},{"type":"codeVoice","code":"TodoList"},{"text":" and ","type":"text"},{"code":"Settings","type":"codeVoice"},{"type":"text","text":" states."},{"type":"text","text":" "},{"text":"We can then create two reducers for each of these states.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let todoReducer = BlockReducer(state: TodoList.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let settingsReducer = BlockReducer(state: Settings.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"type":"codeListing","syntax":null,"code":["let store = Suas.createStore(","  reducer: todoReducer + settingsReducer",")"]},{"inlineContent":[{"code":"todoReducer","type":"codeVoice"},{"type":"text","text":" will handle the “TodoList” key of state and "},{"type":"codeVoice","code":"settingsReducer"},{"text":" will handle the “Settings” portoon of the full Store state","type":"text"}],"type":"paragraph"},{"anchor":"Combine-reducers-with-custom-state-key","type":"heading","text":"Combine reducers with custom state key","level":2},{"inlineContent":[{"type":"text","text":"If a store has a state with two keys “key1” and “key2”. We can register a reducer for each one of these keys."}],"type":"paragraph"},{"inlineContent":[{"text":"We create two reducers with ","type":"text"},{"type":"codeVoice","code":"stateKey"},{"type":"text","text":"s of “key1” and “key2”"}],"type":"paragraph"},{"code":["let myReducer1 = BlockReducer(state: 1, key: \"key1\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let myReducer2 = BlockReducer(state: 1, key: \"key2\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"type":"codeListing","syntax":null,"code":["let store = Suas.createStore(","  reducer: myReducer1 + myReducer2",")"]},{"inlineContent":[{"code":"myReducer1","type":"codeVoice"},{"text":" will handle the “key1” key of state and ","type":"text"},{"type":"codeVoice","code":"myReducer2"},{"type":"text","text":" will handle the “key2” key of state"}],"type":"paragraph"}]}],"abstract":[{"text":"Reducer that represents a combination of two reducers","type":"text"},{"text":" ","type":"text"},{"text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the ","type":"text"},{"code":"+","type":"codeVoice"},{"text":" operator.","type":"text"}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer":{"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombinedReducer"}],"title":"CombinedReducer","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Reducer that represents a combination of two reducers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"type":"codeVoice","code":"+"},{"text":" operator.","type":"text"}],"type":"topic","url":"\/documentation\/supportsdk\/combinedreducer"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"url":"\/documentation\/supportsdk","title":"SupportSDK","kind":"symbol","abstract":[],"role":"collection","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/reduce(state:action:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Any","kind":"keyword"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:10SupportSDK6ActionP"},{"text":") -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":"?"}],"title":"reduce(state:action:)","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)","role":"symbol","abstract":[{"text":"Generates a new state from the old state and an action","type":"text"}],"url":"\/documentation\/supportsdk\/combinedreducer\/reduce(state:action:)","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/Reducer-Implementations":{"kind":"article","title":"Reducer Implementations","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations","role":"collectionGroup","abstract":[],"type":"topic","url":"\/documentation\/supportsdk\/combinedreducer\/reducer-implementations"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Reducer":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"role":"symbol","abstract":[{"text":"Protocol that represents a reducer","type":"text"}],"url":"\/documentation\/supportsdk\/reducer","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/initialState":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"initialState"},{"text":": ","kind":"text"},{"kind":"keyword","text":"Any"}],"title":"initialState","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState","role":"symbol","abstract":[{"text":"Inital state value for this particular reducer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initial state will be used to populate the Store state (which represents the app state)"}],"type":"topic","url":"\/documentation\/supportsdk\/combinedreducer\/initialstate"}}}