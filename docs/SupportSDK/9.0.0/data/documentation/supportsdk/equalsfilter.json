{"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EqualsFilter"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction"},{"kind":"text","text":"<"},{"kind":"keyword","text":"Any"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to use this filter block your state types has to implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"text":" protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note: if you implement "},{"code":"Equatable","type":"codeVoice"},{"text":" you can implement ","type":"text"},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"text":" without any extra code.","type":"text"},{"text":" ","type":"text"},{"text":"You only have to include ","type":"text"},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" in the list of protocols for your type (check examples)."}]},{"text":"Example","type":"heading","level":1,"anchor":"Example"},{"anchor":"Implementing-SuasDynamicEquatable-manually","type":"heading","text":"Implementing SuasDynamicEquatable manually","level":2},{"inlineContent":[{"type":"text","text":"Implementing SuasDynamicEquatable without Equatable"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Implement SuasDynamicEquatable manually","struct MyState: SuasDynamicEquatable {","  let value: Int","","  func isEqual(to other: Any) -> Bool {","    \/\/ Cast to same type","    guard let other = other as? MyState else { return false }","","    \/\/ Compare values","    return other.value == self.value","  }","}","","let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"],"syntax":null},{"text":"Implementing SuasDynamicEquatable as an extension","anchor":"Implementing-SuasDynamicEquatable-as-an-extension","level":2,"type":"heading"},{"inlineContent":[{"text":"If your type implement equatable","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyState: Equatable {","  let value: Int","  static func ==(lhs: MyState, rhs: MyState) -> Bool { ... }","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"You dont need to implement ","type":"text"},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"text":" just add it as an extension to ","type":"text"},{"type":"codeVoice","code":"MyState"},{"text":". No extra code needed.","type":"text"}]},{"syntax":null,"code":["extension MyState: SuasDynamicEquatable { }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EqualsFilter"},{"type":"text","text":" now works with "},{"type":"codeVoice","code":"MyState"}]},{"syntax":null,"code":["let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/supportsdk\/equalsfilter"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:10SupportSDK12EqualsFilterySbyp_yptcvp","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"EqualsFilter","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Any","kind":"keyword"},{"text":">","kind":"text"}],"title":"EqualsFilter","roleHeading":"Global Variable","symbolKind":"var","modules":[{"name":"SupportSDK"}]},"kind":"symbol","abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"type":"text","text":" "},{"text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes.","type":"text"}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/EqualsFilter":{"kind":"symbol","abstract":[{"text":"Listener filter callback that returns true if the old state and the new state are not equal.","type":"text"},{"type":"text","text":" "},{"text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"EqualsFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"text":"<","kind":"text"},{"text":"Any","kind":"keyword"},{"text":">","kind":"text"}],"title":"EqualsFilter","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","url":"\/documentation\/supportsdk\/equalsfilter","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"url":"\/documentation\/supportsdk","title":"SupportSDK","kind":"symbol","abstract":[],"role":"collection","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"url":"\/documentation\/supportsdk\/filterfunction","title":"FilterFunction","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"abstract":[{"text":"Filter function that decides if the listener should be notified or not","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"FilterFunction","kind":"identifier"}]}}}