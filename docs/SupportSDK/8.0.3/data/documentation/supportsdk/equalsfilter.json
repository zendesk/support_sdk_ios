{"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/supportsdk\/equalsfilter"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"symbolKind":"var","role":"symbol","externalID":"s:10SupportSDK12EqualsFilterySbyp_yptcvp","roleHeading":"Global Variable","modules":[{"name":"SupportSDK"}],"title":"EqualsFilter","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EqualsFilter","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":">"}]},"kind":"symbol","abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"text":" ","type":"text"},{"text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"EqualsFilter","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FilterFunction","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction"},{"text":"<","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":">"}],"platforms":["iOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"In order to use this filter block your state types has to implement "},{"code":"SuasDynamicEquatable","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"text":"Note: if you implement ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" you can implement ","type":"text"},{"code":"SuasDynamicEquatable","type":"codeVoice"},{"type":"text","text":" without any extra code."},{"type":"text","text":" "},{"type":"text","text":"You only have to include "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"text":" in the list of protocols for your type (check examples).","type":"text"}],"type":"paragraph"},{"text":"Example","type":"heading","level":1,"anchor":"Example"},{"anchor":"Implementing-SuasDynamicEquatable-manually","level":2,"type":"heading","text":"Implementing SuasDynamicEquatable manually"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implementing SuasDynamicEquatable without Equatable"}]},{"code":["\/\/ Implement SuasDynamicEquatable manually","struct MyState: SuasDynamicEquatable {","  let value: Int","","  func isEqual(to other: Any) -> Bool {","    \/\/ Cast to same type","    guard let other = other as? MyState else { return false }","","    \/\/ Compare values","    return other.value == self.value","  }","}","","let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"],"type":"codeListing","syntax":null},{"text":"Implementing SuasDynamicEquatable as an extension","level":2,"type":"heading","anchor":"Implementing-SuasDynamicEquatable-as-an-extension"},{"type":"paragraph","inlineContent":[{"text":"If your type implement equatable","type":"text"}]},{"type":"codeListing","code":["struct MyState: Equatable {","  let value: Int","  static func ==(lhs: MyState, rhs: MyState) -> Bool { ... }","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You dont need to implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" just add it as an extension to "},{"type":"codeVoice","code":"MyState"},{"text":". No extra code needed.","type":"text"}]},{"code":["extension MyState: SuasDynamicEquatable { }"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EqualsFilter"},{"type":"text","text":" now works with "},{"type":"codeVoice","code":"MyState"}]},{"type":"codeListing","syntax":null,"code":["let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"]}]}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/EqualsFilter":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"type":"text","text":" "},{"type":"text","text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes."}],"type":"topic","title":"EqualsFilter","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EqualsFilter","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"text":"<","kind":"text"},{"kind":"keyword","text":"Any"},{"kind":"text","text":">"}],"url":"\/documentation\/supportsdk\/equalsfilter","kind":"symbol","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"role":"symbol","url":"\/documentation\/supportsdk\/filterfunction","title":"FilterFunction","abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}],"navigatorTitle":[{"text":"FilterFunction","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FilterFunction"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","kind":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"role":"collection","title":"SupportSDK","url":"\/documentation\/supportsdk","abstract":[],"type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","kind":"symbol"}}}