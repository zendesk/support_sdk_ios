{"kind":"symbol","identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(if:callback:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"addListener","kind":"identifier"},{"text":"(","kind":"text"},{"text":"if","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"filterBlock"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","kind":"typeIdentifier","text":"FilterFunction"},{"text":"<","kind":"text"},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","text":"State","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV"},{"text":">? = nil, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","text":"State","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","preciseIdentifier":"s:10SupportSDK5StateV"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["iOS"]}]},{"parameters":[{"name":"filterBlock","content":[{"type":"paragraph","inlineContent":[{"text":"(Optional) block that receives the old state and the new state.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"AnyObjectIt decides wether the notification for the listener should be sent or not."},{"type":"text","text":" "},{"type":"text","text":"When not set, the listener is notified whenever the state changed."}]}]},{"name":"callback","content":[{"type":"paragraph","inlineContent":[{"text":"Notification block called with the new state when the store’s state changed.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"The Listener’s subscription that can be used to remove the notification and for other listener related stuff."}],"type":"paragraph"}]},{"content":[{"text":"Example","level":1,"type":"heading","anchor":"Example"},{"level":2,"type":"heading","anchor":"Adding-a-listener","text":"Adding a listener"},{"inlineContent":[{"text":"Add a simple listener for the full state.","type":"text"}],"type":"paragraph"},{"code":["let subscription = addListener { newState in","  \/\/ Do something with the state","","  \/\/ Get value of Any? Type with key \"TheKey\"","  let value1 = newState.value(forKey: \"TheKey\")","","  \/\/ Get value of MyState? Type with key \"MyState\" (Key value = the type of the state we want)","  let value2 = newState.value(forKeyOfType: MyState.self)","","  \/\/ Get value of MyState? Type with key \"TheKey\"","  let value3 = newState.value(forKey: \"TheKey\", ofType: MyState.self)","}"],"type":"codeListing","syntax":null},{"text":"Adding a listener with a filterBlock","anchor":"Adding-a-listener-with-a-filterBlock","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding a listener for the full state with a filter block."},{"text":" ","type":"text"},{"text":"In the filterBlock we check that the new state has more than 10 items.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The Listener will be notified only if the filterBlock returns true."}]},{"type":"codeListing","syntax":null,"code":["let subscription = store.addListener(if: { oldState, newState in","","  \/\/ Read values from the oldState and the newState","  let old = oldState.value(forKeyOfType: TodoItemsState.self)!","  let new = newState.value(forKeyOfType: TodoItemsState.self)!","","  return new.todos.count > 10","}) { newState in","  \/\/ Do something with the state","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store"]]},"sections":[],"metadata":{"modules":[{"name":"SupportSDK"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addListener","kind":"identifier"},{"kind":"text","text":"("},{"text":"if","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":">?, "},{"text":"callback","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"kind":"text","text":"<"},{"text":"State","preciseIdentifier":"s:10SupportSDK5StateV","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","roleHeading":"Instance Method","extendedModule":"SupportSDK","role":"symbol","title":"addListener(if:callback:)","externalID":"s:10SupportSDK5StoreC11addListener2if8callbackAA12SubscriptionVyAA5StateVGSbAJ_AJtcSg_yAJctF"},"abstract":[{"text":"Add a listener to the store. The listener will be notified when the state changes.","type":"text"},{"type":"text","text":" "},{"text":"The listener will be notified with the full state when","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/supportsdk\/store\/addlistener(if:callback:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Subscription":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","title":"Subscription","kind":"symbol","abstract":[{"type":"text","text":"Subscription structure that represents a listener subscription."},{"text":" ","type":"text"},{"type":"text","text":"When adding a listener you get a subscription back."},{"type":"text","text":" "},{"text":"You can use this subscription to remove the listener, notify about the current state or link the listener lifecycle with an object.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Subscription","kind":"identifier"}],"navigatorTitle":[{"text":"Subscription","kind":"identifier"}],"url":"\/documentation\/supportsdk\/subscription"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"role":"collection","title":"SupportSDK","url":"\/documentation\/supportsdk","abstract":[],"type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","kind":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/State":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"type":"topic","role":"symbol","kind":"symbol","title":"State","url":"\/documentation\/supportsdk\/state","navigatorTitle":[{"kind":"identifier","text":"State"}],"abstract":[{"text":"Structure that represents the store state. The store state is kept as a ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" Keys and "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" Values ("},{"type":"codeVoice","code":"[String: Any]"},{"type":"text","text":")"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"role":"symbol","url":"\/documentation\/supportsdk\/filterfunction","title":"FilterFunction","abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}],"navigatorTitle":[{"text":"FilterFunction","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FilterFunction"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","kind":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store":{"navigatorTitle":[{"kind":"identifier","text":"Store"}],"role":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}],"abstract":[{"text":"Store that contains the application state, the reducer logic, the middleware and the listeners","type":"text"}],"kind":"symbol","title":"Store","type":"topic","url":"\/documentation\/supportsdk\/store"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store/addListener(if:callback:)":{"abstract":[{"text":"Add a listener to the store. The listener will be notified when the state changes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The listener will be notified with the full state when"}],"role":"symbol","url":"\/documentation\/supportsdk\/store\/addlistener(if:callback:)","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(if:callback:)","kind":"symbol","type":"topic","title":"addListener(if:callback:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addListener","kind":"identifier"},{"text":"(","kind":"text"},{"text":"if","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FilterFunction","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV","text":"State"},{"text":">?, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:10SupportSDK5StateV","text":"State","kind":"typeIdentifier"},{"kind":"text","text":">"}]}}}