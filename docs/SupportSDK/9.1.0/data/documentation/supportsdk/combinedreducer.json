{"metadata":{"role":"symbol","modules":[{"name":"SupportSDK"}],"title":"CombinedReducer","externalID":"s:10SupportSDK15CombinedReducerC","symbolKind":"class","roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombinedReducer"}],"navigatorTitle":[{"kind":"identifier","text":"CombinedReducer"}]},"variants":[{"paths":["\/documentation\/supportsdk\/combinedreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CombinedReducer","kind":"identifier"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"codeListing","syntax":null,"code":["let combinedReducers = Reducer1() + Reducer2() + Reducer3()"]},{"level":1,"type":"heading","text":"Example","anchor":"Example"},{"level":2,"type":"heading","text":"Combine reducers","anchor":"Combine-reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your application has two screens, you can model that with two states, for example "},{"type":"codeVoice","code":"TodoList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Settings"},{"type":"text","text":" states."},{"type":"text","text":" "},{"type":"text","text":"We can then create two reducers for each of these states."}]},{"type":"codeListing","syntax":null,"code":["let todoReducer = BlockReducer(state: TodoList.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let settingsReducer = BlockReducer(state: Settings.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"text":"We can then combine these 2 reducers with:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let store = Suas.createStore(","  reducer: todoReducer + settingsReducer",")"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"todoReducer"},{"type":"text","text":" will handle the “TodoList” key of state and "},{"type":"codeVoice","code":"settingsReducer"},{"type":"text","text":" will handle the “Settings” portoon of the full Store state"}]},{"level":2,"type":"heading","text":"Combine reducers with custom state key","anchor":"Combine-reducers-with-custom-state-key"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a store has a state with two keys “key1” and “key2”. We can register a reducer for each one of these keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We create two reducers with "},{"code":"stateKey","type":"codeVoice"},{"type":"text","text":"s of “key1” and “key2”"}]},{"type":"codeListing","syntax":null,"code":["let myReducer1 = BlockReducer(state: 1, key: \"key1\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let myReducer2 = BlockReducer(state: 1, key: \"key2\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"type":"codeListing","syntax":null,"code":["let store = Suas.createStore(","  reducer: myReducer1 + myReducer2",")"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"myReducer1"},{"text":" will handle the “key1” key of state and ","type":"text"},{"type":"codeVoice","code":"myReducer2"},{"text":" will handle the “key2” key of state","type":"text"}]}]}],"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator."}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState"],"generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)"],"generated":true},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"sections":[],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/Reducer-Implementations":{"url":"\/documentation\/supportsdk\/combinedreducer\/reducer-implementations","title":"Reducer Implementations","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations","abstract":[]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","type":"topic","url":"\/documentation\/supportsdk","role":"collection"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer":{"url":"\/documentation\/supportsdk\/combinedreducer","role":"symbol","title":"CombinedReducer","navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CombinedReducer","kind":"identifier"}],"abstract":[{"text":"Reducer that represents a combination of two reducers","type":"text"},{"text":" ","type":"text"},{"text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" operator.","type":"text"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Reducer":{"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"abstract":[{"text":"Protocol that represents a reducer","type":"text"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer","url":"\/documentation\/supportsdk\/reducer","title":"Reducer","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"kind":"symbol","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/reduce(state:action:)":{"url":"\/documentation\/supportsdk\/combinedreducer\/reduce(state:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK6ActionP"},{"text":") -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Generates a new state from the old state and an action"}],"title":"reduce(state:action:)","role":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/initialState":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"initialState"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"}],"url":"\/documentation\/supportsdk\/combinedreducer\/initialstate","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Inital state value for this particular reducer"},{"type":"text","text":" "},{"type":"text","text":"This initial state will be used to populate the Store state (which represents the app state)"}],"type":"topic","title":"initialState"}}}