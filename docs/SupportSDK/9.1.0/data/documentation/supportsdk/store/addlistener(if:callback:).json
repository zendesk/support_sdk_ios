{"metadata":{"title":"addListener(if:callback:)","extendedModule":"SupportSDK","roleHeading":"Instance Method","symbolKind":"method","role":"symbol","modules":[{"name":"SupportSDK"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addListener"},{"kind":"text","text":"("},{"kind":"externalParam","text":"if"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"callback"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Subscription","preciseIdentifier":"s:10SupportSDK12SubscriptionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":">"}],"externalID":"s:10SupportSDK5StoreC11addListener2if8callbackAA12SubscriptionVyAA5StateVGSbAJ_AJtcSg_yAJctF"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["iOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addListener"},{"kind":"text","text":"("},{"kind":"externalParam","text":"if"},{"kind":"text","text":" "},{"kind":"internalParam","text":"filterBlock"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","kind":"typeIdentifier","text":"FilterFunction"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","preciseIdentifier":"s:10SupportSDK5StateV","kind":"typeIdentifier","text":"State"},{"kind":"text","text":">? = nil, "},{"kind":"externalParam","text":"callback"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" ("},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","preciseIdentifier":"s:10SupportSDK5StateV","kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","preciseIdentifier":"s:10SupportSDK12SubscriptionV","kind":"typeIdentifier","text":"Subscription"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State","preciseIdentifier":"s:10SupportSDK5StateV","kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"(Optional) block that receives the old state and the new state.","type":"text"},{"text":" ","type":"text"},{"text":"AnyObjectIt decides wether the notification for the listener should be sent or not.","type":"text"},{"text":" ","type":"text"},{"text":"When not set, the listener is notified whenever the state changed.","type":"text"}]}],"name":"filterBlock"},{"content":[{"inlineContent":[{"type":"text","text":"Notification block called with the new state when the store’s state changed."}],"type":"paragraph"}],"name":"callback"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"text":"The Listener’s subscription that can be used to remove the notification and for other listener related stuff.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","text":"Example","level":1,"anchor":"Example"},{"type":"heading","text":"Adding a listener","level":2,"anchor":"Adding-a-listener"},{"type":"paragraph","inlineContent":[{"text":"Add a simple listener for the full state.","type":"text"}]},{"type":"codeListing","code":["let subscription = addListener { newState in","  \/\/ Do something with the state","","  \/\/ Get value of Any? Type with key \"TheKey\"","  let value1 = newState.value(forKey: \"TheKey\")","","  \/\/ Get value of MyState? Type with key \"MyState\" (Key value = the type of the state we want)","  let value2 = newState.value(forKeyOfType: MyState.self)","","  \/\/ Get value of MyState? Type with key \"TheKey\"","  let value3 = newState.value(forKey: \"TheKey\", ofType: MyState.self)","}"],"syntax":null},{"type":"heading","text":"Adding a listener with a filterBlock","level":2,"anchor":"Adding-a-listener-with-a-filterBlock"},{"type":"paragraph","inlineContent":[{"text":"Adding a listener for the full state with a filter block.","type":"text"},{"text":" ","type":"text"},{"text":"In the filterBlock we check that the new state has more than 10 items.","type":"text"},{"text":" ","type":"text"},{"text":"The Listener will be notified only if the filterBlock returns true.","type":"text"}]},{"type":"codeListing","code":["let subscription = store.addListener(if: { oldState, newState in","","  \/\/ Read values from the oldState and the newState","  let old = oldState.value(forKeyOfType: TodoItemsState.self)!","  let new = newState.value(forKeyOfType: TodoItemsState.self)!","","  return new.todos.count > 10","}) { newState in","  \/\/ Do something with the state","}"],"syntax":null}]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store"]]},"abstract":[{"text":"Add a listener to the store. The listener will be notified when the state changes.","type":"text"},{"text":" ","type":"text"},{"text":"The listener will be notified with the full state when","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/supportsdk\/store\/addlistener(if:callback:)"]}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(if:callback:)","interfaceLanguage":"swift"},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store/addListener(if:callback:)":{"type":"topic","title":"addListener(if:callback:)","kind":"symbol","abstract":[{"type":"text","text":"Add a listener to the store. The listener will be notified when the state changes."},{"type":"text","text":" "},{"type":"text","text":"The listener will be notified with the full state when"}],"url":"\/documentation\/supportsdk\/store\/addlistener(if:callback:)","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(if:callback:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addListener"},{"kind":"text","text":"("},{"kind":"externalParam","text":"if"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV","text":"State"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"callback"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV","text":"State"},{"kind":"text","text":">"}],"role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/State":{"role":"symbol","url":"\/documentation\/supportsdk\/state","navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"type":"text","text":"Structure that represents the store state. The store state is kept as a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" with "},{"type":"codeVoice","code":"String"},{"type":"text","text":" Keys and "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" Values ("},{"type":"codeVoice","code":"[String: Any]"},{"type":"text","text":")"}],"kind":"symbol","type":"topic","title":"State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","type":"topic","url":"\/documentation\/supportsdk","role":"collection"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Subscription":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","title":"Subscription","kind":"symbol","abstract":[{"type":"text","text":"Subscription structure that represents a listener subscription."},{"type":"text","text":" "},{"type":"text","text":"When adding a listener you get a subscription back."},{"type":"text","text":" "},{"type":"text","text":"You can use this subscription to remove the listener, notify about the current state or link the listener lifecycle with an object."}],"url":"\/documentation\/supportsdk\/subscription","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Subscription"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Subscription"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store":{"kind":"symbol","url":"\/documentation\/supportsdk\/store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"type":"topic","abstract":[{"text":"Store that contains the application state, the reducer logic, the middleware and the listeners","type":"text"}],"title":"Store"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}],"url":"\/documentation\/supportsdk\/filterfunction","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FilterFunction"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"title":"FilterFunction","role":"symbol"}}}