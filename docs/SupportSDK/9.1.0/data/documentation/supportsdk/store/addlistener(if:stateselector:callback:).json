{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addListener","kind":"identifier"},{"text":"<","kind":"text"},{"text":"StateType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"if","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"filterBlock","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"FilterFunction","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State"},{"text":">? = nil, ","kind":"text"},{"text":"stateSelector","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"text":" ","kind":"text"},{"text":"StateSelector","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK13StateSelectora","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/StateSelector"},{"text":"<","kind":"text"},{"text":"StateType","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp"},{"text":">, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"text":" (","kind":"text"},{"text":"StateType","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"Subscription","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription"},{"text":"<","kind":"text"},{"text":"StateType","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp"},{"text":">","kind":"text"}],"platforms":["iOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"filterBlock","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) block that receives the old state and the new state."},{"type":"text","text":" "},{"type":"text","text":"It decides wether the notification for the listener should be sent or not."},{"type":"text","text":" "},{"type":"text","text":"When not set, the listener is notified whenever the state changed."}]}]},{"name":"stateSelector","content":[{"inlineContent":[{"type":"text","text":"State selector block that selects a part of the full state"}],"type":"paragraph"}]},{"name":"callback","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notification block called with the new state when the store’s state changed."}]}]}]},{"content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"The Listener’s subscription that can be used to remove the notification and for other listener related stuff."}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Example","anchor":"Example","type":"heading","level":1},{"text":"Adding a listener with a state selector","anchor":"Adding-a-listener-with-a-state-selector","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Add a simple listener for the full state with a state selector that selects part of it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Create a state selector that selects and creates a ","type":"text"},{"type":"codeVoice","code":"TodoItemsState"},{"text":" from the full ","type":"text"},{"type":"codeVoice","code":"Store"},{"text":" state.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let stateSelector: StateSelector<TodoItemsState> = { state in","  \/\/ Read values from the store","  let value1 = state.value(forKeyOfType: SomeType.self)","  let value2 = state.value(forKey: \"someKey\")","","  \/\/ Create and return a TodoItemsState","  return TodoItemsState(.....)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a listener with the state selector and"}]},{"syntax":null,"type":"codeListing","code":["let subscription = store.addListener(stateSelector: stateSelector) { newState in","  \/\/ newState here is a TodoItemsState","}"]},{"text":"Adding a listener with a state selector and a filter block","anchor":"Adding-a-listener-with-a-state-selector-and-a-filter-block","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a simple listener for the full state with a state selector that selects part of it and a filter block that decide when to notify."}]},{"type":"paragraph","inlineContent":[{"text":"Create a state selector that selects and creates a ","type":"text"},{"code":"TodoItemsState","type":"codeVoice"},{"text":" from the full ","type":"text"},{"code":"Store","type":"codeVoice"},{"text":" state.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let stateSelector: StateSelector<TodoItemsState> = { state in","  \/\/ Read values from the store","  let value1 = state.value(forKeyOfType: SomeType.self)","  let value2 = state.value(forKey: \"someKey\")","","  \/\/ Create and return a TodoItemsState","  return TodoItemsState(.....)","}"]},{"type":"paragraph","inlineContent":[{"text":"Add a filter block that decides when to notify","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let filterBlock: FilterFunction<State> = { oldState, newState in","  \/\/ Read a string from the oldState and newState","  \/\/ oldState and newState are the full Store state","  let value1 = oldState.value(forKey: \"someKey\", ofType: String.self)","  let value2 = newState.value(forKey: \"someKey\", ofType: String.self)","","  \/\/ Compare","  return value1 != value2","}"]},{"type":"paragraph","inlineContent":[{"text":"Add a listener with the state selector and","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let subscription = store.addListener(stateSelector: stateSelector) { newState in","  \/\/ newState here is a TodoItemsState","}"]}],"kind":"content"}],"abstract":[{"type":"text","text":"Add a listener to the store with a stateSelector"}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store"]]},"sections":[],"metadata":{"roleHeading":"Instance Method","title":"addListener(if:stateSelector:callback:)","role":"symbol","modules":[{"name":"SupportSDK"}],"extendedModule":"SupportSDK","symbolKind":"method","externalID":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addListener"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"StateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"if"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:10SupportSDK5StateV"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"stateSelector"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StateSelector","preciseIdentifier":"s:10SupportSDK13StateSelectora"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"callback"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Subscription","preciseIdentifier":"s:10SupportSDK12SubscriptionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp"},{"kind":"text","text":">"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/supportsdk\/store\/addlistener(if:stateselector:callback:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(if:stateSelector:callback:)","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store/addListener(if:stateSelector:callback:)":{"kind":"symbol","url":"\/documentation\/supportsdk\/store\/addlistener(if:stateselector:callback:)","abstract":[{"type":"text","text":"Add a listener to the store with a stateSelector"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addListener"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"StateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"if"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StateV","text":"State"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"stateSelector"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK13StateSelectora","text":"StateSelector"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp","text":"StateType"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"callback"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp","text":"StateType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener2if13stateSelector8callbackAA12SubscriptionVyxGSbAA5StateV_ALtcSg_xSgALcyxctlF0K4TypeL_xmfp","text":"StateType"},{"kind":"text","text":">"}],"type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(if:stateSelector:callback:)","title":"addListener(if:stateSelector:callback:)","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","type":"topic","url":"\/documentation\/supportsdk","role":"collection"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store":{"kind":"symbol","url":"\/documentation\/supportsdk\/store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"type":"topic","abstract":[{"text":"Store that contains the application state, the reducer logic, the middleware and the listeners","type":"text"}],"title":"Store"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/StateSelector":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateSelector","kind":"identifier"}],"title":"StateSelector","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"StateSelector","kind":"identifier"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/StateSelector","abstract":[{"text":"Function that selects part of the full state","type":"text"}],"url":"\/documentation\/supportsdk\/stateselector"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/State":{"role":"symbol","url":"\/documentation\/supportsdk\/state","navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"type":"text","text":"Structure that represents the store state. The store state is kept as a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" with "},{"type":"codeVoice","code":"String"},{"type":"text","text":" Keys and "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" Values ("},{"type":"codeVoice","code":"[String: Any]"},{"type":"text","text":")"}],"kind":"symbol","type":"topic","title":"State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/State"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}],"url":"\/documentation\/supportsdk\/filterfunction","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FilterFunction"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"title":"FilterFunction","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Subscription":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","title":"Subscription","kind":"symbol","abstract":[{"type":"text","text":"Subscription structure that represents a listener subscription."},{"type":"text","text":" "},{"type":"text","text":"When adding a listener you get a subscription back."},{"type":"text","text":" "},{"type":"text","text":"You can use this subscription to remove the listener, notify about the current state or link the listener lifecycle with an object."}],"url":"\/documentation\/supportsdk\/subscription","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Subscription"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Subscription"}]}}}