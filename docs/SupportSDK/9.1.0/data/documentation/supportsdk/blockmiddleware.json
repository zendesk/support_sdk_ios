{"variants":[{"paths":["\/documentation\/supportsdk\/blockmiddleware"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BlockMiddleware","kind":"identifier"}],"modules":[{"name":"SupportSDK"}],"roleHeading":"Class","title":"BlockMiddleware","symbolKind":"class","externalID":"s:10SupportSDK15BlockMiddlewareC","navigatorTitle":[{"text":"BlockMiddleware","kind":"identifier"}]},"kind":"symbol","identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockMiddleware","interfaceLanguage":"swift"},"topicSections":[{"anchor":"Initializers","title":"Initializers","generated":true,"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockMiddleware\/init(actionFunction:)"]},{"anchor":"Instance-Methods","title":"Instance Methods","generated":true,"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockMiddleware\/onAction(action:getState:dispatch:next:)"]}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Middleware"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BlockMiddleware","kind":"identifier"}],"platforms":["iOS"]}],"kind":"declarations"},{"content":[{"text":"Example","anchor":"Example","level":1,"type":"heading"},{"code":["let middleware = BlockMiddleware { action, getState, dispatch, next in","  \/\/ Read the state before any reducer changes it","  print(\"The old state is \\(getState())\")","","  \/\/ Print the action","  print(\"The action is \\(action)\")","","  \/\/ Continue the dispatching process..until the reducer reduces the action","  \/\/ Not calling `next` will prevent the action from reaching the reducer","  next?(action)","","  \/\/ Read the state after any reducer changes it","  print(\"The new state is \\(api?.state)\")","}"],"type":"codeListing","syntax":null}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"Create a middleware inline with a block."}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/BlockMiddleware/onAction(action:getState:dispatch:next:)":{"title":"onAction(action:getState:dispatch:next:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onAction"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:10SupportSDK6ActionP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GetStateFunction","preciseIdentifier":"s:10SupportSDK16GetStateFunctiona"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dispatch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchFunction","preciseIdentifier":"s:10SupportSDK16DispatchFunctiona"},{"kind":"text","text":", "},{"kind":"externalParam","text":"next"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NextFunction","preciseIdentifier":"s:10SupportSDK12NextFunctiona"},{"kind":"text","text":")"}],"url":"\/documentation\/supportsdk\/blockmiddleware\/onaction(action:getstate:dispatch:next:)","kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockMiddleware\/onAction(action:getState:dispatch:next:)","abstract":[{"type":"text","text":"Function called when an action is dispatched"}],"role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","type":"topic","url":"\/documentation\/supportsdk","role":"collection"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/BlockMiddleware":{"navigatorTitle":[{"text":"BlockMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockMiddleware","url":"\/documentation\/supportsdk\/blockmiddleware","type":"topic","abstract":[{"text":"Create a middleware inline with a block.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BlockMiddleware","kind":"identifier"}],"kind":"symbol","title":"BlockMiddleware","role":"symbol"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Middleware":{"kind":"symbol","url":"\/documentation\/supportsdk\/middleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Middleware","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Middleware","navigatorTitle":[{"text":"Middleware","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Middleware protocol that represents a suas store middleware"},{"type":"text","text":" "},{"text":"A middleware helps extending the dispatch logic of Suas.","type":"text"}],"title":"Middleware"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/BlockMiddleware/init(actionFunction:)":{"role":"symbol","abstract":[{"type":"text","text":"Create a middleware with an onAction callback block"}],"title":"init(actionFunction:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"actionFunction","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"MiddlewareFunction","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK18MiddlewareFunctiona"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockMiddleware\/init(actionFunction:)","kind":"symbol","url":"\/documentation\/supportsdk\/blockmiddleware\/init(actionfunction:)","type":"topic"}}}