{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/supportsdk\/equalsfilter"]}],"abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"type":"text","text":" "},{"type":"text","text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes."}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EqualsFilter"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","text":"FilterFunction","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"text":"<","kind":"text"},{"text":"Any","kind":"keyword"},{"text":">","kind":"text"}],"platforms":["iOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to use this filter block your state types has to implement "},{"code":"SuasDynamicEquatable","type":"codeVoice"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"Note: if you implement ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" you can implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" without any extra code."},{"text":" ","type":"text"},{"type":"text","text":"You only have to include "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"text":" in the list of protocols for your type (check examples).","type":"text"}]},{"anchor":"Example","type":"heading","text":"Example","level":1},{"text":"Implementing SuasDynamicEquatable manually","level":2,"anchor":"Implementing-SuasDynamicEquatable-manually","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Implementing SuasDynamicEquatable without Equatable","type":"text"}]},{"code":["\/\/ Implement SuasDynamicEquatable manually","struct MyState: SuasDynamicEquatable {","  let value: Int","","  func isEqual(to other: Any) -> Bool {","    \/\/ Cast to same type","    guard let other = other as? MyState else { return false }","","    \/\/ Compare values","    return other.value == self.value","  }","}","","let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"],"syntax":null,"type":"codeListing"},{"type":"heading","level":2,"anchor":"Implementing-SuasDynamicEquatable-as-an-extension","text":"Implementing SuasDynamicEquatable as an extension"},{"inlineContent":[{"type":"text","text":"If your type implement equatable"}],"type":"paragraph"},{"syntax":null,"code":["struct MyState: Equatable {","  let value: Int","  static func ==(lhs: MyState, rhs: MyState) -> Bool { ... }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You dont need to implement ","type":"text"},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"text":" just add it as an extension to ","type":"text"},{"type":"codeVoice","code":"MyState"},{"type":"text","text":". No extra code needed."}]},{"code":["extension MyState: SuasDynamicEquatable { }"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"codeVoice","code":"EqualsFilter"},{"type":"text","text":" now works with "},{"type":"codeVoice","code":"MyState"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"]}],"kind":"content"}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"symbol","roleHeading":"Global Variable","modules":[{"name":"SupportSDK"}],"symbolKind":"var","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"EqualsFilter","kind":"identifier"},{"kind":"text","text":": "},{"text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"keyword","text":"Any"},{"text":">","kind":"text"}],"externalID":"s:10SupportSDK12EqualsFilterySbyp_yptcvp","title":"EqualsFilter"},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/EqualsFilter":{"url":"\/documentation\/supportsdk\/equalsfilter","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"EqualsFilter","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10SupportSDK14FilterFunctiona","kind":"typeIdentifier","text":"FilterFunction"},{"text":"<","kind":"text"},{"kind":"keyword","text":"Any"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","role":"symbol","title":"EqualsFilter","abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"type":"text","text":" "},{"type":"text","text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes."}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","abstract":[],"role":"collection","kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","url":"\/documentation\/supportsdk","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","url":"\/documentation\/supportsdk\/filterfunction","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FilterFunction"}],"type":"topic","kind":"symbol","role":"symbol","title":"FilterFunction","navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}]}}}