{"relationshipsSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"modules":[{"name":"SupportSDK"}],"navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}],"externalID":"s:10SupportSDK15CombinedReducerC","symbolKind":"class","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"CombinedReducer","kind":"identifier"}],"title":"CombinedReducer","role":"symbol","roleHeading":"Class"},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState"]},{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)"],"title":"Instance Methods"},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations"]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/supportsdk\/combinedreducer"]}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CombinedReducer","kind":"identifier"}],"languages":["swift"],"platforms":["iOS"]}]},{"content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","code":["let combinedReducers = Reducer1() + Reducer2() + Reducer3()"],"syntax":null},{"level":1,"anchor":"Example","type":"heading","text":"Example"},{"level":2,"type":"heading","text":"Combine reducers","anchor":"Combine-reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your application has two screens, you can model that with two states, for example "},{"code":"TodoList","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Settings"},{"type":"text","text":" states."},{"type":"text","text":" "},{"text":"We can then create two reducers for each of these states.","type":"text"}]},{"code":["let todoReducer = BlockReducer(state: TodoList.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let settingsReducer = BlockReducer(state: Settings.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"syntax":null,"code":["let store = Suas.createStore(","  reducer: todoReducer + settingsReducer",")"],"type":"codeListing"},{"inlineContent":[{"code":"todoReducer","type":"codeVoice"},{"type":"text","text":" will handle the “TodoList” key of state and "},{"code":"settingsReducer","type":"codeVoice"},{"type":"text","text":" will handle the “Settings” portoon of the full Store state"}],"type":"paragraph"},{"anchor":"Combine-reducers-with-custom-state-key","text":"Combine reducers with custom state key","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a store has a state with two keys “key1” and “key2”. We can register a reducer for each one of these keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We create two reducers with "},{"type":"codeVoice","code":"stateKey"},{"text":"s of “key1” and “key2”","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let myReducer1 = BlockReducer(state: 1, key: \"key1\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let myReducer2 = BlockReducer(state: 1, key: \"key2\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"text":"We can then combine these 2 reducers with:","type":"text"}]},{"code":["let store = Suas.createStore(","  reducer: myReducer1 + myReducer2",")"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"codeVoice","code":"myReducer1"},{"text":" will handle the “key1” key of state and ","type":"text"},{"type":"codeVoice","code":"myReducer2"},{"type":"text","text":" will handle the “key2” key of state"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the ","type":"text"},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator."}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","interfaceLanguage":"swift"},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/initialState":{"title":"initialState","role":"symbol","url":"\/documentation\/supportsdk\/combinedreducer\/initialstate","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState","abstract":[{"text":"Inital state value for this particular reducer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initial state will be used to populate the Store state (which represents the app state)"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"initialState","kind":"identifier"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Reducer":{"url":"\/documentation\/supportsdk\/reducer","title":"Reducer","type":"topic","abstract":[{"text":"Protocol that represents a reducer","type":"text"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/reduce(state:action:)":{"title":"reduce(state:action:)","role":"symbol","url":"\/documentation\/supportsdk\/combinedreducer\/reduce(state:action:)","kind":"symbol","abstract":[{"type":"text","text":"Generates a new state from the old state and an action"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Action","preciseIdentifier":"s:10SupportSDK6ActionP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":"?"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/Reducer-Implementations":{"title":"Reducer Implementations","role":"collectionGroup","url":"\/documentation\/supportsdk\/combinedreducer\/reducer-implementations","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations","abstract":[],"kind":"article","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"title":"SupportSDK","abstract":[],"role":"collection","kind":"symbol","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","url":"\/documentation\/supportsdk","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer":{"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" operator.","type":"text"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","title":"CombinedReducer","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"CombinedReducer","kind":"identifier"}],"type":"topic","url":"\/documentation\/supportsdk\/combinedreducer","navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}],"kind":"symbol"}}}