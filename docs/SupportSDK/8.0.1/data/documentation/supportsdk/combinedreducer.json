{"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"text":"Reducer that represents a combination of two reducers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"code":"+","type":"codeVoice"},{"text":" operator.","type":"text"}],"relationshipsSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"final","kind":"keyword"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"CombinedReducer","kind":"identifier"}],"languages":["swift"],"platforms":["iOS"]}]},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"syntax":null,"code":["let combinedReducers = Reducer1() + Reducer2() + Reducer3()"],"type":"codeListing"},{"level":1,"anchor":"Example","text":"Example","type":"heading"},{"text":"Combine reducers","type":"heading","anchor":"Combine-reducers","level":2},{"type":"paragraph","inlineContent":[{"text":"If your application has two screens, you can model that with two states, for example ","type":"text"},{"code":"TodoList","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Settings"},{"type":"text","text":" states."},{"text":" ","type":"text"},{"type":"text","text":"We can then create two reducers for each of these states."}]},{"type":"codeListing","syntax":null,"code":["let todoReducer = BlockReducer(state: TodoList.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let settingsReducer = BlockReducer(state: Settings.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"code":["let store = Suas.createStore(","  reducer: todoReducer + settingsReducer",")"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"code":"todoReducer","type":"codeVoice"},{"text":" will handle the “TodoList” key of state and ","type":"text"},{"type":"codeVoice","code":"settingsReducer"},{"type":"text","text":" will handle the “Settings” portoon of the full Store state"}]},{"type":"heading","text":"Combine reducers with custom state key","anchor":"Combine-reducers-with-custom-state-key","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a store has a state with two keys “key1” and “key2”. We can register a reducer for each one of these keys."}]},{"inlineContent":[{"type":"text","text":"We create two reducers with "},{"type":"codeVoice","code":"stateKey"},{"text":"s of “key1” and “key2”","type":"text"}],"type":"paragraph"},{"code":["let myReducer1 = BlockReducer(state: 1, key: \"key1\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let myReducer2 = BlockReducer(state: 1, key: \"key2\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"We can then combine these 2 reducers with:","type":"text"}],"type":"paragraph"},{"code":["let store = Suas.createStore(","  reducer: myReducer1 + myReducer2",")"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"myReducer1"},{"type":"text","text":" will handle the “key1” key of state and "},{"type":"codeVoice","code":"myReducer2"},{"type":"text","text":" will handle the “key2” key of state"}]}],"kind":"content"}],"sections":[],"variants":[{"paths":["\/documentation\/supportsdk\/combinedreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState"],"title":"Instance Properties"},{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)"],"title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations"],"generated":true}],"metadata":{"modules":[{"name":"SupportSDK"}],"title":"CombinedReducer","externalID":"s:10SupportSDK15CombinedReducerC","symbolKind":"class","role":"symbol","roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombinedReducer"}],"navigatorTitle":[{"text":"CombinedReducer","kind":"identifier"}]},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Reducer":{"kind":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer","abstract":[{"type":"text","text":"Protocol that represents a reducer"}],"role":"symbol","url":"\/documentation\/supportsdk\/reducer","type":"topic","navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/reduce(state:action:)":{"title":"reduce(state:action:)","url":"\/documentation\/supportsdk\/combinedreducer\/reduce(state:action:)","abstract":[{"text":"Generates a new state from the old state and an action","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Any","kind":"keyword"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10SupportSDK6ActionP","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"Any"},{"text":"?","kind":"text"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","title":"CombinedReducer","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"CombinedReducer","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombinedReducer"}],"url":"\/documentation\/supportsdk\/combinedreducer","abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"type":"codeVoice","code":"+"},{"text":" operator.","type":"text"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"kind":"symbol","type":"topic","title":"SupportSDK","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","url":"\/documentation\/supportsdk","role":"collection","abstract":[]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/initialState":{"url":"\/documentation\/supportsdk\/combinedreducer\/initialstate","title":"initialState","abstract":[{"type":"text","text":"Inital state value for this particular reducer"},{"type":"text","text":" "},{"type":"text","text":"This initial state will be used to populate the Store state (which represents the app state)"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"initialState"},{"text":": ","kind":"text"},{"text":"Any","kind":"keyword"}]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/Reducer-Implementations":{"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations","title":"Reducer Implementations","type":"topic","role":"collectionGroup","kind":"article","url":"\/documentation\/supportsdk\/combinedreducer\/reducer-implementations","abstract":[]}}}