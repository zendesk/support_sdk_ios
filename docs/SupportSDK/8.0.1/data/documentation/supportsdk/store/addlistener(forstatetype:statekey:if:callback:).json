{"metadata":{"roleHeading":"Instance Method","symbolKind":"method","role":"symbol","externalID":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF","title":"addListener(forStateType:stateKey:if:callback:)","extendedModule":"SupportSDK","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addListener","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"StateType"},{"text":">(","kind":"text"},{"text":"forStateType","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType"},{"text":".Type, ","kind":"text"},{"text":"stateKey","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK8StateKeya","text":"StateKey"},{"text":"?, ","kind":"text"},{"text":"if","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FilterFunction","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"StateType","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"callback"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType","kind":"typeIdentifier"},{"kind":"text","text":">"}],"modules":[{"name":"SupportSDK"}]},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","abstract":[{"type":"text","text":"Add a listener to the store. The listener will be notified when the state changes."}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(forStateType:stateKey:if:callback:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/supportsdk\/store\/addlistener(forstatetype:statekey:if:callback:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"addListener","kind":"identifier"},{"text":"<","kind":"text"},{"text":"StateType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"forStateType","kind":"externalParam"},{"kind":"text","text":" "},{"text":"type","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType"},{"kind":"text","text":".Type, "},{"text":"stateKey","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10SupportSDK8StateKeya","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/StateKey","text":"StateKey","kind":"typeIdentifier"},{"text":"? = nil, ","kind":"text"},{"kind":"externalParam","text":"if"},{"text":" ","kind":"text"},{"text":"filterBlock","kind":"internalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType","kind":"typeIdentifier"},{"text":">? = nil, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"attribute","text":"@escaping"},{"text":" (","kind":"text"},{"text":"StateType","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","preciseIdentifier":"s:10SupportSDK12SubscriptionV","text":"Subscription"},{"text":"<","kind":"text"},{"text":"StateType","kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp"},{"kind":"text","text":">"}],"platforms":["iOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"type","content":[{"type":"paragraph","inlineContent":[{"text":"The type of the state to listen to. If the state type is not found, the listener will not be notified.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(Optional) the state key to listen to. When not passed (or passing nil) the type name from "},{"type":"codeVoice","code":"forStateType"},{"type":"text","text":" will be used."},{"text":" ","type":"text"},{"type":"text","text":"Only pass when the state key for the state was changed in the reducer (99% of the times you dont need to set this parameter)"}]}],"name":"stateKey"},{"name":"filterBlock","content":[{"inlineContent":[{"type":"text","text":"(Optional) block that receives the old state and the new state."},{"text":" ","type":"text"},{"type":"text","text":"It decides wether the notification for the listener should be sent or not."},{"type":"text","text":" "},{"text":"When not set, the listener is notified whenever the state changed.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Notification block called with the new state when the store’s state changed."}],"type":"paragraph"}],"name":"callback"}]},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"The Listener’s subscription that can be used to remove the notification and for other listener related stuff."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","anchor":"Example","level":1,"text":"Example"},{"anchor":"Adding-a-listener","level":2,"text":"Adding a listener","type":"heading"},{"inlineContent":[{"text":"Add a simple listener for a ","type":"text"},{"code":"MyState","type":"codeVoice"},{"text":" state type","type":"text"}],"type":"paragraph"},{"code":["let subscription = store.addListener(forStateType: MyState.self) { newState in","  \/\/ Do something with the state","}"],"type":"codeListing","syntax":null},{"text":"Adding a listener with a filterBlock","type":"heading","level":2,"anchor":"Adding-a-listener-with-a-filterBlock"},{"inlineContent":[{"type":"text","text":"Adding a listener for a state of "},{"type":"codeVoice","code":"TodoItemsState"},{"text":" type with a filter block.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the filterBlock we check that the new state has more items than the old state."},{"type":"text","text":" "},{"text":"The Listener will be notified only if the filterBlock returns true.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let subscription = store.addListener(","  forStateType: TodoItemsState.self,","  if: { old, new in return old.todos.count > new.todos.count }) { newState in","    \/\/ Do something with the state","}"],"syntax":null},{"anchor":"Adding-a-listener-with-a-state-key","type":"heading","text":"Adding a listener with a state key","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding a listener for a state of "},{"code":"TodoItemsState","type":"codeVoice"},{"type":"text","text":" type, the reducer registered the state key to “todos”"}]},{"type":"codeListing","syntax":null,"code":["let subscription = store.addListener(forStateType: TodoItemsState.self, stateKey: \"todos\") { newState in","  \/\/ Do something with the state","}"]}]}],"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store"]]},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FilterFunction","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}],"navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"url":"\/documentation\/supportsdk\/filterfunction","kind":"symbol","title":"FilterFunction"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store":{"abstract":[{"type":"text","text":"Store that contains the application state, the reducer logic, the middleware and the listeners"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store","url":"\/documentation\/supportsdk\/store","title":"Store","kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"role":"symbol","type":"topic"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/StateKey":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"StateKey","kind":"identifier"}],"type":"topic","abstract":[{"text":"Store state is stored as a Dictionary of [StateKey: Any]","type":"text"}],"url":"\/documentation\/supportsdk\/statekey","title":"StateKey","navigatorTitle":[{"text":"StateKey","kind":"identifier"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/StateKey"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"kind":"symbol","type":"topic","title":"SupportSDK","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","url":"\/documentation\/supportsdk","role":"collection","abstract":[]},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Subscription":{"type":"topic","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Subscription","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Subscription","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Subscription structure that represents a listener subscription.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When adding a listener you get a subscription back."},{"type":"text","text":" "},{"text":"You can use this subscription to remove the listener, notify about the current state or link the listener lifecycle with an object.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Subscription"}],"url":"\/documentation\/supportsdk\/subscription","kind":"symbol","title":"Subscription"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Store/addListener(forStateType:stateKey:if:callback:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/supportsdk\/store\/addlistener(forstatetype:statekey:if:callback:)","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Store\/addListener(forStateType:stateKey:if:callback:)","abstract":[{"type":"text","text":"Add a listener to the store. The listener will be notified when the state changes."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"addListener","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"StateType"},{"kind":"text","text":">("},{"kind":"externalParam","text":"forStateType"},{"text":": ","kind":"text"},{"text":"StateType","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"stateKey"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10SupportSDK8StateKeya","text":"StateKey","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"if","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType","kind":"typeIdentifier"},{"text":">?, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"StateType","preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Subscription","preciseIdentifier":"s:10SupportSDK12SubscriptionV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:10SupportSDK5StoreC11addListener12forStateType8stateKey2if8callbackAA12SubscriptionVyxGxm_SSSgSbx_xtcSgyxctlF0gH0L_xmfp","text":"StateType","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"addListener(forStateType:stateKey:if:callback:)"}}}